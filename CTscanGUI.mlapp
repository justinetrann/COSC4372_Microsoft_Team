classdef GUIprojectct < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        CTScannerUIFigure               matlab.ui.Figure
        AcquisitionPanel                matlab.ui.container.Panel
        RunAcquisitionButton            matlab.ui.control.Button
        SaveReconstructedImageButton    matlab.ui.control.Button
        MethodTextArea                  matlab.ui.control.TextArea
        MethodTextAreaLabel             matlab.ui.control.Label
        PhantomTypeTextArea             matlab.ui.control.TextArea
        PhantomTypeTextAreaLabel        matlab.ui.control.Label
        TrajectoryLabel                 matlab.ui.control.Label
        outputPointsPerLineEditField    matlab.ui.control.NumericEditField
        ofdetectorsIterationsLabel      matlab.ui.control.Label
        outputNumLinesEditField         matlab.ui.control.NumericEditField
        ofprojectionangleLabel          matlab.ui.control.Label
        SelectSampleTypePanel           matlab.ui.container.Panel
        RunCompareContrastDiffernceButton_2  matlab.ui.control.Button
        SaveSignalIntensityImageButton  matlab.ui.control.Button
        ofDetectorsIterationsEditField  matlab.ui.control.NumericEditField
        ofDetectorsIterationsEditFieldLabel  matlab.ui.control.Label
        ProjectionAngleEditField        matlab.ui.control.NumericEditField
        ProjectionAngleEditFieldLabel   matlab.ui.control.Label
        SamplingButtonGroup             matlab.ui.container.ButtonGroup
        IterativeReconstructionSIButton_4  matlab.ui.control.RadioButton
        IRgraph                         matlab.ui.control.Image
        FilteredBackprojectionSIButton  matlab.ui.control.RadioButton
        FBgraph                         matlab.ui.control.Image
        CRSgraph                        matlab.ui.control.Image
        ConvertedtoradonspaceSIButton   matlab.ui.control.RadioButton
        OIgraph                         matlab.ui.control.Image
        OriginalImageSIButton           matlab.ui.control.RadioButton
        ReconstructedImagePanel         matlab.ui.container.Panel
        ReconstructedImage              matlab.ui.control.UIAxes
        CTImagePanel                    matlab.ui.container.Panel
        CTImage                         matlab.ui.control.UIAxes
        PhantomImagePanel               matlab.ui.container.Panel
        PhantomImage                    matlab.ui.control.UIAxes
        PhantomPanel                    matlab.ui.container.Panel
        LengthSlider_2                  matlab.ui.control.Slider
        LengthSlider_2Label             matlab.ui.control.Label
        SavePhantomImageButton          matlab.ui.control.Button
        GeneratePhantomButton           matlab.ui.control.Button
        RectangularConfigurationSizePanel  matlab.ui.container.Panel
        Defaultalwaysequivalentto50Label_2  matlab.ui.control.Label
        Defaultalwaysequivalentto50Label  matlab.ui.control.Label
        WidthSlider                     matlab.ui.control.Slider
        WidthSliderLabel                matlab.ui.control.Label
        PhantomButtonGroup              matlab.ui.container.ButtonGroup
        OriginalImageButton             matlab.ui.control.RadioButton
        Image                           matlab.ui.control.Image
        Rectangular                     matlab.ui.control.Image
        Circular                        matlab.ui.control.Image
        Phantom2Button                  matlab.ui.control.RadioButton
        Phantom1Button                  matlab.ui.control.RadioButton
        CTSCANNERLabel                  matlab.ui.control.Label
    end

    
    properties (Access = private)
        shape % Description
    end
    
    methods (Access = private)
        
        function [update] = draw(~, canvas, center, radius, color)
            % Get canvas size
            canvas_size = size(canvas);
            
            % Get canvas boundry
            % since canvas is a square, we set boundry to be the value on the x-axis
            boundry = canvas_size(1);
            
            %------------------------------------------------------------------
            % Checking if inner circle is out of scope
            %------------------------------------------------------------------
            
            % The right max value = inner circle x value - radius
            right_max = center(1) - radius;
            
            % The left max value = inner circle x value + radius
            left_max = center(1) + radius;
            
            % The upper max value = inner circle y value + radius
            upper_max = center(2) + radius;
            
            % The lower max value = inner circle y value - radius
            lower_max = center(2) - radius;
            
            % In case inner circle out of scope
            if( right_max < 0 || left_max > boundry || upper_max > boundry || lower_max < 0 )
                update = -1;
            % If everything is correct
            else        
                % the staring point of circle on x-axix
                circle_begin = center(1) - radius;
                % the ending point of circle on y-axix
                circle_end = center(1) + radius;
                
                % loop through each point on the horizontal diameter
                for i  = circle_begin : circle_end
                    current_x = center(1) - i;
                    current = floor(sqrt(radius^2 - current_x^2));
                    % measure the length of y at point x
                    y_begin = center(2) - current;
                    y_end = center(2) + current;
                    y_axis = y_begin : y_end;
                    % draw line
                    canvas(i, y_axis) = color;
                end
            end    
            
            % update the canvas
            update = canvas;
        end
    end
    
    methods (Access = public)
        
        function sg = cRadon(img, theta)
                
                step = 1;
                
                angles = 1:step:theta;
                sg = zeros(size(img, 1), length(theta));
                
                for i = 1:length(angles)
                    sg(:, i) = sum(imrotate(img, -angles(i), 'bilinear', 'crop'));
                end

          end

        function ir = cART(sg, theta, niter)
            %ITERATIVERECONSTRUCTION Iterative reconstruction
            %   Inputs:
            %   sg - Sinogram (image converted to radon space)
            %   theta - Projection angles (in degrees)
            %   niter - Number of iterations
            %
            %   For example: ir = cART(sg, 180, 50);
   
            
            
            % You can play with steps (deafault 1):
            step = 1;
            
            angles = 1:step:theta;
            [ir, tdiff] = deal(zeros(length(sg)));
            
            for i = 1:niter
                for j = 1:length(angles)
                    ir = imrotate(ir, step, 'bicubic', 'crop');
                    tmp = sum(repelem(sg(:, j), 1, length(ir)), 2);
                    diff = (tmp - sum(ir, 2)) / length(ir);
                    for k = 1:length(ir)
                        tdiff(:, k) = diff;
                    end
                    ir = ir + tdiff;
                end
            end
            
            % Crop final image (Optional)
            % [h, w] = size(sg);
            % ir = imcrop(ir, [(h-w)/2, (h-w)/2, w, w]);
            
        end

        function bp = cFBP(sg, theta)
            
            % You can play with steps (deafault 1):
            step = 1;
            
            angles = 1:step:theta;
            bp = zeros(length(sg));
            % tmp = bp;
            
            % You can comment the filter below and use it as simple backprojection
            ramlak = abs(linspace(-1, 1, length(sg))');
            % ramlak = repmat(ramlak, [1 length(angles)]);
            
            fft_R = fftshift(fft(sg, [], 1), 1);
            filtproj = ifftshift(fft_R .* ramlak, 1);
            sg = real(ifft(filtproj, [], 1));
            
            for i = 1:length(angles)               
                tmp = repelem(sg(:, i), 1, length(sg));
                tmp = imrotate(tmp, angles(i), 'bilinear', 'crop');
                bp = bp + tmp;
            end         
        
        end

     end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: GeneratePhantomButton
        function GeneratePhantomButtonPushed(app, event)
            size = [256,256];
            %size = [512, 512];
            canvas = zeros(size);

            cp = [size(1)/2 , size(2)/2];
            bg_circle_r = ceil(0.4 * size(1));
            canvas = draw(app, canvas, cp, bg_circle_r, 75);
            
            %Change the color to grey 
            canvas = uint8(canvas);

            %[y,x] = find(canvas);
            %plot(app.PhantomImage, x,y);
            
            % specify distance between each pair of inner circles 
            distance = ceil(bg_circle_r/5.4);
            
            if(app.Phantom1Button.Value)
                % make an array of inner circles
                innerCircle = [];
                outerCircle = [];
                

                % inner circle 1
                innerCircle(1).center = [cp(1) + (0.5 * distance), (cp(2)- floor(3.5 * distance))];
                innerCircle(1).radius = ceil( min(size)/55);
                %canvas = draw(app, canvas, innerCircle(1).center, innerCircle(1).radius, 250);
                
                
                % inner circle 2
                innerCircle(2).center = [cp(1) - (3*distance), (cp(2) - (0.5*distance))];
                innerCircle(2).radius = floor(1.52 * innerCircle(1).radius);
                %canvas = draw(app, canvas, innerCircle(2).center, innerCircle(2).radius, 250);
                
                % inner circle 3
                innerCircle(3).center = [cp(1) - floor(0.3 *distance), (cp(2))];
                innerCircle(3).radius = floor(1.52 * innerCircle(2).radius);
                %canvas = draw(app, canvas, innerCircle(3).center, innerCircle(3).radius, 250);
                
                % inner circle 4
                innerCircle(4).center = [cp(1) + (3*distance), (cp(2))];
                innerCircle(4).radius = floor(1.52 * innerCircle(3).radius);
                %canvas = draw(app, canvas, innerCircle(4).center, innerCircle(4).radius, 232);
                
                % inner circle 5
                innerCircle(5).center = [cp(1), (cp(2) + floor(3.5 * distance))];
                innerCircle(5).radius = floor(1.7 * innerCircle(4).radius);
                %canvas = draw(app, canvas, innerCircle(5).center, innerCircle(5).radius, 232);

                %1st circle from the left
                outerCircle(1).radius = floor(innerCircle(3).radius * 1.4);
                canvas = draw(app, canvas, innerCircle(1).center, outerCircle(1).radius, 0);
                canvas = draw(app, canvas, innerCircle(1).center, floor(innerCircle(3).radius * 1.3), 75);
                %2st circle from the left + top circle
                outerCircle(2).radius = floor(innerCircle(1).radius * 1.5);
                canvas = draw(app, canvas, innerCircle(2).center, outerCircle(2).radius, 0);
                canvas = draw(app, canvas, innerCircle(2).center, floor(innerCircle(1).radius * 1.3), 75);
                %big round center circle
                outerCircle(3).radius = floor(innerCircle(5).radius * 1.05);
                canvas = draw(app, canvas, innerCircle(3).center, outerCircle(3).radius, 0);
                canvas = draw(app, canvas, innerCircle(3).center, innerCircle(5).radius, 250);
                %last circle (bottom-most)
                outerCircle(4).radius = floor(innerCircle(4).radius * 1.35);
                canvas = draw(app, canvas, innerCircle(4).center, outerCircle(4).radius, 0);
                value = floor(innerCircle(4).radius * 1.3);
                canvas = draw(app, canvas, innerCircle(4).center, value, 75);
                
       
            elseif(app.Phantom2Button.Value)
                width = 5*app.WidthSlider.Value;
                length = 5*app.LengthSlider.Value;
                
                if(width<1)
                    width = 30; 
                end

                if(length < 1)
                    length = 30;
                end

                if(width > 100)
                    width = 100;
                end

                if(length > 100)
                    length = 100;
                end

                r_size = floor([width*2 length*2]);

                % get user input - rectangular size 
                % r_para[width, height]
                r_para = r_size;
        
                % x-axis = height
                % height x-axis starting point
                x1 = floor(cp(2) - r_para(2)/2);
                % height x-axis ending point
                x2 = x1 + r_para(2);
                
                % y-axis = width
                % width y-axix starting point
                y1 = floor(cp(1) - r_para(1)/2);
                % width y-axix ending point
                y2 = y1 + r_para(1);
        
                % draw the squre
                canvas(x1 : x2, y1 : y2) = 256;
                    
            else
                canvas = imread('original.png');
                %P = phantom('Modified Shepp-Logan', 256);
                
                %canvas = imshow(P);
            end

            

            imwrite(canvas,'./test.png');


            a = imread('./test.png');
            imshow(a,'parent', app.PhantomImage);
            
        end

        % Callback function
        function DisplayKSpaceButtonPushed(app, event)
            % reference: https://www.mathworks.com/help/images/fourier-transform.html
            
            % read the phantom
            imdata = imread('./test.png');
            %figure(1);imshow(imdata); title('Original Image');

            % grey scale
            imdata = im2gray(imdata);
            %figure(2);imshow(imdata); title('Grey Scale');

            % get the fourier transform with zero padding of 1k by 1k
            fourier_t = fft2(imdata, 1256, 1256);

            % shift the k-space
            fourier_shift = fftshift(fourier_t);
            s = abs(fourier_shift);
            %figure(3);imshow(s, []); title('Fourier Transform');

            % log transform
            s2 = log(s);
            %figure(4);imshow(s2, []); title('Log Transform FT');

            % show image in panel
            imshow(s2, [], 'parent', app.KSpaceImage);
        end

        % Button pushed function: RunAcquisitionButton
        function RunAcquisitionButtonPushed(app, event)
            app.PhantomTypeTextArea.Value = app.PhantomButtonGroup.SelectedObject.Text;
            app.MethodTextArea.Value = app.SamplingButtonGroup.SelectedObject.Text;
            numLine = app.ProjectionAngleEditField.Value;
            pointsPerLine = app.ofDetectorsIterationsEditField.Value;

            app.outputNumLinesEditField.Value = numLine*2;
            app.outputPointsPerLineEditField.Value = pointsPerLine*2;

            size = [256, 256];
            canvas = zeros(size);

            cp = [size(1)/2 , size(2)/2];
            bg_circle_r = ceil(0.1 * size(1));
            draw(app, canvas, cp, bg_circle_r, 75);

            %imwrite(canvas,'./test.png');
            RGB = imread("original.png");
            ig = rgb2gray(RGB);

            r_img = cRadon(ig, 180);
            bp_img = cFBP(r_img, 180);
            ir_img = cART(r_img, 180, 1);


            
            imshow(ir_img,'parent', app.CTImage);
           
        end

        % Selection changed function: PhantomButtonGroup
        function PhantomButtonGroupSelectionChanged(app, event)
            switch app.PhantomButtonGroup.SelectedObject.Text
                case 'Phantom1Button'
                    val = 1;
                case 'Phantom2Button'
                    val = 2;
                case 'Phantom3Button'
                    val = 3;
                otherwise
                    val = 0;
            end
        end

        % Selection changed function: SamplingButtonGroup
        function SamplingButtonGroupSelectionChanged(app, event)
            switch app.SamplingButtonGroup.SelectedObject.Text
                case 'Original Image SI'
                    val = 1;
                case 'Converted to radon space SI'
                    val = 2;
                case 'Filtered Backprojection SI'
                    val = 3;
                case 'Iterative Reconstruction SI'
                    val = 4;

                otherwise
                    val = 0;
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create CTScannerUIFigure and hide until all components are created
            app.CTScannerUIFigure = uifigure('Visible', 'off');
            app.CTScannerUIFigure.Color = [0.502 0.502 0.502];
            app.CTScannerUIFigure.Position = [100 100 1523 858];
            app.CTScannerUIFigure.Name = 'Virtual CT Scanner';

            % Create CTSCANNERLabel
            app.CTSCANNERLabel = uilabel(app.CTScannerUIFigure);
            app.CTSCANNERLabel.BackgroundColor = [1 0 0];
            app.CTSCANNERLabel.HorizontalAlignment = 'center';
            app.CTSCANNERLabel.FontName = 'Verdana';
            app.CTSCANNERLabel.FontWeight = 'bold';
            app.CTSCANNERLabel.Position = [64 789 1382 51];
            app.CTSCANNERLabel.Text = 'CT SCANNER';

            % Create PhantomPanel
            app.PhantomPanel = uipanel(app.CTScannerUIFigure);
            app.PhantomPanel.TitlePosition = 'centertop';
            app.PhantomPanel.Title = 'Phantom';
            app.PhantomPanel.BackgroundColor = [0.502 0.502 0.502];
            app.PhantomPanel.FontName = 'Verdana';
            app.PhantomPanel.FontAngle = 'italic';
            app.PhantomPanel.Position = [61 20 316 451];

            % Create PhantomButtonGroup
            app.PhantomButtonGroup = uibuttongroup(app.PhantomPanel);
            app.PhantomButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @PhantomButtonGroupSelectionChanged, true);
            app.PhantomButtonGroup.BorderType = 'none';
            app.PhantomButtonGroup.TitlePosition = 'centertop';
            app.PhantomButtonGroup.BackgroundColor = [0.502 0.502 0.502];
            app.PhantomButtonGroup.FontName = 'Verdana';
            app.PhantomButtonGroup.Position = [4 315 290 94];

            % Create Phantom1Button
            app.Phantom1Button = uiradiobutton(app.PhantomButtonGroup);
            app.Phantom1Button.Text = 'Phantom 1';
            app.Phantom1Button.FontName = 'Verdana';
            app.Phantom1Button.Position = [11 68 87 22];
            app.Phantom1Button.Value = true;

            % Create Phantom2Button
            app.Phantom2Button = uiradiobutton(app.PhantomButtonGroup);
            app.Phantom2Button.Text = 'Phantom 2';
            app.Phantom2Button.FontName = 'Verdana';
            app.Phantom2Button.Position = [111 68 87 22];

            % Create Circular
            app.Circular = uiimage(app.PhantomButtonGroup);
            app.Circular.BackgroundColor = [1 1 1];
            app.Circular.Position = [16 12 80 57];
            app.Circular.ImageSource = 'phantom1.png';

            % Create Rectangular
            app.Rectangular = uiimage(app.PhantomButtonGroup);
            app.Rectangular.BackgroundColor = [1 1 1];
            app.Rectangular.Position = [115 12 80 57];
            app.Rectangular.ImageSource = 'phantom2.png';

            % Create Image
            app.Image = uiimage(app.PhantomButtonGroup);
            app.Image.BackgroundColor = [0.902 0.902 0.902];
            app.Image.Position = [214 12 80 57];
            app.Image.ImageSource = 'original.png';

            % Create OriginalImageButton
            app.OriginalImageButton = uiradiobutton(app.PhantomButtonGroup);
            app.OriginalImageButton.Text = 'Original Image';
            app.OriginalImageButton.Position = [211 68 100 22];

            % Create RectangularConfigurationSizePanel
            app.RectangularConfigurationSizePanel = uipanel(app.PhantomPanel);
            app.RectangularConfigurationSizePanel.BorderType = 'none';
            app.RectangularConfigurationSizePanel.TitlePosition = 'centertop';
            app.RectangularConfigurationSizePanel.Title = 'Rectangular Configuration Size';
            app.RectangularConfigurationSizePanel.BackgroundColor = [0.502 0.502 0.502];
            app.RectangularConfigurationSizePanel.FontName = 'Verdana';
            app.RectangularConfigurationSizePanel.Position = [4 168 306 134];

            % Create WidthSliderLabel
            app.WidthSliderLabel = uilabel(app.RectangularConfigurationSizePanel);
            app.WidthSliderLabel.HorizontalAlignment = 'right';
            app.WidthSliderLabel.FontName = 'Verdana';
            app.WidthSliderLabel.Position = [16 58 40 22];
            app.WidthSliderLabel.Text = 'Width';

            % Create WidthSlider
            app.WidthSlider = uislider(app.RectangularConfigurationSizePanel);
            app.WidthSlider.Limits = [0 50];
            app.WidthSlider.MajorTicks = [0 10 20 30 40 50 60 70 80];
            app.WidthSlider.FontName = 'Verdana';
            app.WidthSlider.Position = [77 67 186 3];

            % Create Defaultalwaysequivalentto50Label
            app.Defaultalwaysequivalentto50Label = uilabel(app.RectangularConfigurationSizePanel);
            app.Defaultalwaysequivalentto50Label.Position = [66 82 182 22];
            app.Defaultalwaysequivalentto50Label.Text = 'Default always equivalent to 50%';

            % Create Defaultalwaysequivalentto50Label_2
            app.Defaultalwaysequivalentto50Label_2 = uilabel(app.RectangularConfigurationSizePanel);
            app.Defaultalwaysequivalentto50Label_2.Position = [66 7 182 22];
            app.Defaultalwaysequivalentto50Label_2.Text = 'Default always equivalent to 50%';

            % Create GeneratePhantomButton
            app.GeneratePhantomButton = uibutton(app.PhantomPanel, 'push');
            app.GeneratePhantomButton.ButtonPushedFcn = createCallbackFcn(app, @GeneratePhantomButtonPushed, true);
            app.GeneratePhantomButton.BackgroundColor = [0 1 0];
            app.GeneratePhantomButton.Position = [91 14 117 53];
            app.GeneratePhantomButton.Text = 'Generate Phantom';

            % Create SavePhantomImageButton
            app.SavePhantomImageButton = uibutton(app.PhantomPanel, 'push');
            app.SavePhantomImageButton.BackgroundColor = [0 1 0];
            app.SavePhantomImageButton.Position = [82 74 134 53];
            app.SavePhantomImageButton.Text = 'Save Phantom Image';

            % Create LengthSlider_2Label
            app.LengthSlider_2Label = uilabel(app.PhantomPanel);
            app.LengthSlider_2Label.HorizontalAlignment = 'right';
            app.LengthSlider_2Label.Position = [14 155 42 22];
            app.LengthSlider_2Label.Text = {'Length'; ''};

            % Create LengthSlider_2
            app.LengthSlider_2 = uislider(app.PhantomPanel);
            app.LengthSlider_2.Limits = [0 50];
            app.LengthSlider_2.MajorTicks = [0 10 20 30 40 50 60 70 80];
            app.LengthSlider_2.MinorTicks = [0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50];
            app.LengthSlider_2.Position = [77 164 189 3];

            % Create PhantomImagePanel
            app.PhantomImagePanel = uipanel(app.CTScannerUIFigure);
            app.PhantomImagePanel.TitlePosition = 'centertop';
            app.PhantomImagePanel.Title = 'Phantom Image';
            app.PhantomImagePanel.BackgroundColor = [0.502 0.502 0.502];
            app.PhantomImagePanel.FontName = 'Verdana';
            app.PhantomImagePanel.FontAngle = 'italic';
            app.PhantomImagePanel.Position = [65 491 313 283];

            % Create PhantomImage
            app.PhantomImage = uiaxes(app.PhantomImagePanel);
            zlabel(app.PhantomImage, 'Z')
            app.PhantomImage.FontName = 'Verdana';
            app.PhantomImage.XColor = [1 1 1];
            app.PhantomImage.YColor = [1 1 1];
            app.PhantomImage.BoxStyle = 'full';
            app.PhantomImage.GridColor = [0.502 0.502 0.502];
            app.PhantomImage.Position = [5 17 298 251];

            % Create CTImagePanel
            app.CTImagePanel = uipanel(app.CTScannerUIFigure);
            app.CTImagePanel.TitlePosition = 'centertop';
            app.CTImagePanel.Title = 'Acquired CT Signal Intensity Graph';
            app.CTImagePanel.BackgroundColor = [0.502 0.502 0.502];
            app.CTImagePanel.FontName = 'Verdana';
            app.CTImagePanel.FontAngle = 'italic';
            app.CTImagePanel.Position = [610 491 313 283];

            % Create CTImage
            app.CTImage = uiaxes(app.CTImagePanel);
            zlabel(app.CTImage, 'Z')
            app.CTImage.FontName = 'Verdana';
            app.CTImage.XColor = [1 1 1];
            app.CTImage.YColor = [1 1 1];
            app.CTImage.GridColor = [0.15 0.15 0.15];
            app.CTImage.Position = [6 17 298 251];

            % Create ReconstructedImagePanel
            app.ReconstructedImagePanel = uipanel(app.CTScannerUIFigure);
            app.ReconstructedImagePanel.TitlePosition = 'centertop';
            app.ReconstructedImagePanel.Title = 'Reconstructed Image';
            app.ReconstructedImagePanel.BackgroundColor = [0.502 0.502 0.502];
            app.ReconstructedImagePanel.FontName = 'Verdana';
            app.ReconstructedImagePanel.FontAngle = 'italic';
            app.ReconstructedImagePanel.Position = [1133 491 313 283];

            % Create ReconstructedImage
            app.ReconstructedImage = uiaxes(app.ReconstructedImagePanel);
            zlabel(app.ReconstructedImage, 'Z')
            app.ReconstructedImage.FontName = 'Verdana';
            app.ReconstructedImage.XColor = [1 1 1];
            app.ReconstructedImage.YColor = [1 1 1];
            app.ReconstructedImage.GridColor = [0.502 0.502 0.502];
            app.ReconstructedImage.Position = [8 17 298 251];

            % Create SelectSampleTypePanel
            app.SelectSampleTypePanel = uipanel(app.CTScannerUIFigure);
            app.SelectSampleTypePanel.TitlePosition = 'centertop';
            app.SelectSampleTypePanel.Title = 'Select Sample Type';
            app.SelectSampleTypePanel.BackgroundColor = [0.502 0.502 0.502];
            app.SelectSampleTypePanel.FontName = 'Verdana';
            app.SelectSampleTypePanel.FontAngle = 'italic';
            app.SelectSampleTypePanel.Position = [607 21 318 451];

            % Create SamplingButtonGroup
            app.SamplingButtonGroup = uibuttongroup(app.SelectSampleTypePanel);
            app.SamplingButtonGroup.SelectionChangedFcn = createCallbackFcn(app, @SamplingButtonGroupSelectionChanged, true);
            app.SamplingButtonGroup.ForegroundColor = [1 1 1];
            app.SamplingButtonGroup.BorderType = 'none';
            app.SamplingButtonGroup.BackgroundColor = [0.502 0.502 0.502];
            app.SamplingButtonGroup.FontName = 'Verdana';
            app.SamplingButtonGroup.Position = [4 174 282 247];

            % Create OriginalImageSIButton
            app.OriginalImageSIButton = uiradiobutton(app.SamplingButtonGroup);
            app.OriginalImageSIButton.Text = 'Original Image SI';
            app.OriginalImageSIButton.FontName = 'Verdana';
            app.OriginalImageSIButton.Position = [20 231 192 22];
            app.OriginalImageSIButton.Value = true;

            % Create OIgraph
            app.OIgraph = uiimage(app.SamplingButtonGroup);
            app.OIgraph.BackgroundColor = [1 1 1];
            app.OIgraph.Position = [51 193 31 35];
            app.OIgraph.ImageSource = 'cartesian.png';

            % Create ConvertedtoradonspaceSIButton
            app.ConvertedtoradonspaceSIButton = uiradiobutton(app.SamplingButtonGroup);
            app.ConvertedtoradonspaceSIButton.Text = 'Converted to radon space SI';
            app.ConvertedtoradonspaceSIButton.FontName = 'Verdana';
            app.ConvertedtoradonspaceSIButton.Position = [20 169 196 22];

            % Create CRSgraph
            app.CRSgraph = uiimage(app.SamplingButtonGroup);
            app.CRSgraph.BackgroundColor = [1 1 1];
            app.CRSgraph.Position = [51 127 31 35];

            % Create FBgraph
            app.FBgraph = uiimage(app.SamplingButtonGroup);
            app.FBgraph.BackgroundColor = [1 1 1];
            app.FBgraph.Position = [51 57 31 35];

            % Create FilteredBackprojectionSIButton
            app.FilteredBackprojectionSIButton = uiradiobutton(app.SamplingButtonGroup);
            app.FilteredBackprojectionSIButton.Text = 'Filtered Backprojection SI';
            app.FilteredBackprojectionSIButton.FontName = 'Verdana';
            app.FilteredBackprojectionSIButton.Position = [20 96 192 22];

            % Create IRgraph
            app.IRgraph = uiimage(app.SamplingButtonGroup);
            app.IRgraph.BackgroundColor = [1 1 1];
            app.IRgraph.Position = [51 -5 31 35];

            % Create IterativeReconstructionSIButton_4
            app.IterativeReconstructionSIButton_4 = uiradiobutton(app.SamplingButtonGroup);
            app.IterativeReconstructionSIButton_4.Text = 'Iterative Reconstruction SI';
            app.IterativeReconstructionSIButton_4.FontName = 'Verdana';
            app.IterativeReconstructionSIButton_4.Position = [20 38 192 10];

            % Create ProjectionAngleEditFieldLabel
            app.ProjectionAngleEditFieldLabel = uilabel(app.SelectSampleTypePanel);
            app.ProjectionAngleEditFieldLabel.BackgroundColor = [0.502 0.502 0.502];
            app.ProjectionAngleEditFieldLabel.HorizontalAlignment = 'right';
            app.ProjectionAngleEditFieldLabel.FontName = 'Verdana';
            app.ProjectionAngleEditFieldLabel.FontSize = 11;
            app.ProjectionAngleEditFieldLabel.FontColor = [1 1 1];
            app.ProjectionAngleEditFieldLabel.Position = [1 140 101 22];
            app.ProjectionAngleEditFieldLabel.Text = 'Projection Angle';

            % Create ProjectionAngleEditField
            app.ProjectionAngleEditField = uieditfield(app.SelectSampleTypePanel, 'numeric');
            app.ProjectionAngleEditField.HorizontalAlignment = 'center';
            app.ProjectionAngleEditField.FontName = 'Verdana';
            app.ProjectionAngleEditField.FontSize = 11;
            app.ProjectionAngleEditField.FontColor = [1 1 1];
            app.ProjectionAngleEditField.BackgroundColor = [0.502 0.502 0.502];
            app.ProjectionAngleEditField.Position = [104 134 17 38];

            % Create ofDetectorsIterationsEditFieldLabel
            app.ofDetectorsIterationsEditFieldLabel = uilabel(app.SelectSampleTypePanel);
            app.ofDetectorsIterationsEditFieldLabel.BackgroundColor = [0.502 0.502 0.502];
            app.ofDetectorsIterationsEditFieldLabel.HorizontalAlignment = 'right';
            app.ofDetectorsIterationsEditFieldLabel.FontName = 'Verdana';
            app.ofDetectorsIterationsEditFieldLabel.FontSize = 11;
            app.ofDetectorsIterationsEditFieldLabel.FontColor = [1 1 1];
            app.ofDetectorsIterationsEditFieldLabel.Position = [138 141 153 22];
            app.ofDetectorsIterationsEditFieldLabel.Text = '# of Detectors (Iterations)';

            % Create ofDetectorsIterationsEditField
            app.ofDetectorsIterationsEditField = uieditfield(app.SelectSampleTypePanel, 'numeric');
            app.ofDetectorsIterationsEditField.HorizontalAlignment = 'center';
            app.ofDetectorsIterationsEditField.FontName = 'Verdana';
            app.ofDetectorsIterationsEditField.FontSize = 11;
            app.ofDetectorsIterationsEditField.FontColor = [1 1 1];
            app.ofDetectorsIterationsEditField.BackgroundColor = [0.502 0.502 0.502];
            app.ofDetectorsIterationsEditField.Position = [291 133 17 42];

            % Create SaveSignalIntensityImageButton
            app.SaveSignalIntensityImageButton = uibutton(app.SelectSampleTypePanel, 'push');
            app.SaveSignalIntensityImageButton.BackgroundColor = [0 1 0];
            app.SaveSignalIntensityImageButton.Position = [72 75 164 53];
            app.SaveSignalIntensityImageButton.Text = 'Save Signal Intensity Image';

            % Create RunCompareContrastDiffernceButton_2
            app.RunCompareContrastDiffernceButton_2 = uibutton(app.SelectSampleTypePanel, 'push');
            app.RunCompareContrastDiffernceButton_2.BackgroundColor = [0 1 0];
            app.RunCompareContrastDiffernceButton_2.Position = [68 13 174 53];
            app.RunCompareContrastDiffernceButton_2.Text = 'Run Compare Contrast Differnce';

            % Create AcquisitionPanel
            app.AcquisitionPanel = uipanel(app.CTScannerUIFigure);
            app.AcquisitionPanel.TitlePosition = 'centertop';
            app.AcquisitionPanel.Title = 'Acquisition';
            app.AcquisitionPanel.BackgroundColor = [0.502 0.502 0.502];
            app.AcquisitionPanel.FontName = 'Verdana';
            app.AcquisitionPanel.FontAngle = 'italic';
            app.AcquisitionPanel.Position = [1133 20 313 451];

            % Create ofprojectionangleLabel
            app.ofprojectionangleLabel = uilabel(app.AcquisitionPanel);
            app.ofprojectionangleLabel.BackgroundColor = [0.502 0.502 0.502];
            app.ofprojectionangleLabel.HorizontalAlignment = 'center';
            app.ofprojectionangleLabel.FontName = 'Verdana';
            app.ofprojectionangleLabel.FontColor = [1 1 1];
            app.ofprojectionangleLabel.Position = [72 238 104 22];
            app.ofprojectionangleLabel.Text = 'Projection Angle';

            % Create outputNumLinesEditField
            app.outputNumLinesEditField = uieditfield(app.AcquisitionPanel, 'numeric');
            app.outputNumLinesEditField.Editable = 'off';
            app.outputNumLinesEditField.HorizontalAlignment = 'center';
            app.outputNumLinesEditField.FontName = 'Verdana';
            app.outputNumLinesEditField.FontColor = [1 1 1];
            app.outputNumLinesEditField.BackgroundColor = [0.502 0.502 0.502];
            app.outputNumLinesEditField.Position = [170 230 95 38];

            % Create ofdetectorsIterationsLabel
            app.ofdetectorsIterationsLabel = uilabel(app.AcquisitionPanel);
            app.ofdetectorsIterationsLabel.BackgroundColor = [0.502 0.502 0.502];
            app.ofdetectorsIterationsLabel.HorizontalAlignment = 'right';
            app.ofdetectorsIterationsLabel.FontName = 'Verdana';
            app.ofdetectorsIterationsLabel.FontColor = [1 1 1];
            app.ofdetectorsIterationsLabel.Position = [-10 182 166 22];
            app.ofdetectorsIterationsLabel.Text = '# of Detectors (Iterations)';

            % Create outputPointsPerLineEditField
            app.outputPointsPerLineEditField = uieditfield(app.AcquisitionPanel, 'numeric');
            app.outputPointsPerLineEditField.Editable = 'off';
            app.outputPointsPerLineEditField.HorizontalAlignment = 'center';
            app.outputPointsPerLineEditField.FontName = 'Verdana';
            app.outputPointsPerLineEditField.FontColor = [1 1 1];
            app.outputPointsPerLineEditField.BackgroundColor = [0.502 0.502 0.502];
            app.outputPointsPerLineEditField.Position = [170 174 94 38];

            % Create TrajectoryLabel
            app.TrajectoryLabel = uilabel(app.AcquisitionPanel);
            app.TrajectoryLabel.BackgroundColor = [0.502 0.502 0.502];
            app.TrajectoryLabel.FontName = 'Verdana';
            app.TrajectoryLabel.Position = [17 330 80 27];
            app.TrajectoryLabel.Text = 'Trajectory:';

            % Create PhantomTypeTextAreaLabel
            app.PhantomTypeTextAreaLabel = uilabel(app.AcquisitionPanel);
            app.PhantomTypeTextAreaLabel.BackgroundColor = [0.502 0.502 0.502];
            app.PhantomTypeTextAreaLabel.HorizontalAlignment = 'right';
            app.PhantomTypeTextAreaLabel.FontName = 'Verdana';
            app.PhantomTypeTextAreaLabel.Position = [5 380 96 22];
            app.PhantomTypeTextAreaLabel.Text = 'Phantom Type:';

            % Create PhantomTypeTextArea
            app.PhantomTypeTextArea = uitextarea(app.AcquisitionPanel);
            app.PhantomTypeTextArea.HorizontalAlignment = 'center';
            app.PhantomTypeTextArea.FontName = 'Verdana';
            app.PhantomTypeTextArea.BackgroundColor = [0.502 0.502 0.502];
            app.PhantomTypeTextArea.Position = [116 378 172 26];

            % Create MethodTextAreaLabel
            app.MethodTextAreaLabel = uilabel(app.AcquisitionPanel);
            app.MethodTextAreaLabel.BackgroundColor = [0.502 0.502 0.502];
            app.MethodTextAreaLabel.HorizontalAlignment = 'right';
            app.MethodTextAreaLabel.FontName = 'Verdana';
            app.MethodTextAreaLabel.Position = [104 297 50 22];
            app.MethodTextAreaLabel.Text = 'Method';

            % Create MethodTextArea
            app.MethodTextArea = uitextarea(app.AcquisitionPanel);
            app.MethodTextArea.HorizontalAlignment = 'center';
            app.MethodTextArea.FontName = 'Verdana';
            app.MethodTextArea.BackgroundColor = [0.502 0.502 0.502];
            app.MethodTextArea.Position = [169 288 95 33];

            % Create SaveReconstructedImageButton
            app.SaveReconstructedImageButton = uibutton(app.AcquisitionPanel, 'push');
            app.SaveReconstructedImageButton.BackgroundColor = [0 1 0];
            app.SaveReconstructedImageButton.Position = [60 76 193 53];
            app.SaveReconstructedImageButton.Text = 'Save Reconstructed Image';

            % Create RunAcquisitionButton
            app.RunAcquisitionButton = uibutton(app.AcquisitionPanel, 'push');
            app.RunAcquisitionButton.ButtonPushedFcn = createCallbackFcn(app, @RunAcquisitionButtonPushed, true);
            app.RunAcquisitionButton.BackgroundColor = [0 1 0];
            app.RunAcquisitionButton.Position = [95 14 126 53];
            app.RunAcquisitionButton.Text = 'Run Acquisition';

            % Show the figure after all components are created
            app.CTScannerUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = GUIprojectct

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.CTScannerUIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.CTScannerUIFigure)
        end
    end
end